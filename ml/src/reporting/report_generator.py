from io import BytesIO
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from sqlalchemy.orm import Session
from services.fapi.models.model_predictions import ModelPrediction
from services.fapi.models.risk_predictions import RiskPrediction
from services.fapi.models.anomaly_signals import AnomalySignal

def generate_city_report(db: Session, city: str) -> BytesIO:
    """
    Generate a PDF snapshot for a city with:
    - Forecast (latest)
    - Risk indices
    - Anomalies
    """
    buffer = BytesIO()
    c = canvas.Canvas(buffer, pagesize=letter)

    # Title
    c.setFont("Helvetica-Bold", 18)
    c.drawString(50, 750, f"Housing Insights Report â€” {city}")

    # Forecast section
    forecast = (
        db.query(ModelPrediction)
        .filter(ModelPrediction.city == city, ModelPrediction.target == "price")
        .order_by(ModelPrediction.predict_date.desc())
        .limit(1)
        .first()
    )
    if forecast:
        c.setFont("Helvetica", 12)
        c.drawString(50, 710, f"Latest Price Forecast: {forecast.yhat:,.0f} ({forecast.predict_date})")

    # Risk section
    risks = (
        db.query(RiskPrediction)
        .filter(RiskPrediction.city == city)
        .order_by(RiskPrediction.predict_date.desc())
        .all()
    )
    if risks:
        c.setFont("Helvetica-Bold", 14)
        c.drawString(50, 680, "Risk Indices:")
        y = 660
        for r in risks:
            c.setFont("Helvetica", 12)
            c.drawString(70, y, f"{r.risk_type}: {float(r.risk_value):.2f}")
            y -= 20

    # Anomalies section
    anomalies = (
        db.query(AnomalySignal)
        .filter(AnomalySignal.city == city, AnomalySignal.is_anomaly == True)
        .order_by(AnomalySignal.detect_date.desc())
        .limit(3)
        .all()
    )
    if anomalies:
        c.setFont("Helvetica-Bold", 14)
        c.drawString(50, y - 10, "Recent Anomalies:")
        y -= 30
        for a in anomalies:
            c.setFont("Helvetica", 12)
            c.drawString(70, y, f"{a.detect_date}: {a.target} spike (score={a.anomaly_score:.2f})")
            y -= 20

    # Footer
    c.setFont("Helvetica-Oblique", 9)
    c.drawString(50, 50, "Generated by Housing Insights & Risk Dashboard")

    c.showPage()
    c.save()
    buffer.seek(0)
    return buffer
